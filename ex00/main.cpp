#include "ScalarConverter.hpp"
//

int main(int argc, char** argv){
    {   //float literal

        // std::cout << "42.0f's type: " << typeid(42.0f).name() << std::endl;
        // std::cout << "42.f's type: " << typeid(42.F).name() << std::endl;
        // std::cout << "42.'s type: " << typeid(42.).name() << std::endl;
        // std::cout << "42.0's type: " << typeid(42.0).name() << std::endl;
        // std::cout << "42's type: " << typeid(42).name() << std::endl;
        // std::cout << "INT_MAX's type: " << typeid(INT_MAX).name() << std::endl;
        // std::cout << "INT_MAX+1's type: " << typeid(INT_MAX+1).name() << std::endl;
        // std::cout << "2147483647's type: " << typeid(2147483647).name() << std::endl;
        // std::cout << "2147483647+1's type: " << typeid(2147483647+1).name() << std::endl;
        // std::cout << "INT_MIN's type: " << typeid(INT_MIN).name() << std::endl;
        // std::cout << "INT_MIN-1's type: " << typeid(INT_MIN-1).name() << std::endl;
        // std::cout << "-2147483648's type: " << typeid(-2147483648).name() << std::endl;
        // std::cout << "-2147483648-1's type: " << typeid(-2147483648-1).name() << std::endl;
    }
    {   //double literal
        // double d = 42.0;
        // double d1 = 42;
        // double d2 = 42.;
        // std::cout << d << std::endl;
        // std::cout << d1 << std::endl;
        // std::cout << d2 << std::endl;
        // std::cout << static_cast<float>(2147483647) << std::endl;
    }
    {
        //double d = 21474836471340;
        //std::cout << "------ " << d << " -----" << std::endl;
        //std::cout << std::bitset<64>(d) << std::endl;
        //std::cout << "------ "<< static_cast<float>(d) << " -----" << std::endl;
        //std::cout << std::bitset<32>(static_cast<float>(d)) << std::endl;
        //std::cout << "------ "<< static_cast<float>(-d) << " -----" << std::endl;

        //inff cast to double
        // float f = std::numeric_limits<float>::infinity();
        // std::cout << "inff :" << f << std::endl;
        // std::cout << "cast :" << static_cast<double>(f) << std::endl;

        // {
        //     std::stringstream ss("inf");
        //     float f;
        //     if(!(ss >> f)){
        //         std::cout << "fail" << std::endl;
        //         std::cout << f << std::endl;
        //     }
        //     else
        //         std::cout << f << std::endl;
        // }
    }
    {
        // 0 00000000 (1).00000000000000000000000. <-最大でも23bitしかシフトできない
        // 0 00000000 (1).00000000000000000000000(0). <-24bitシフトすると1の加算を表現できる桁が落ちるので1の加算はできない。2はできる。3もできない.
        //2の24乗 + n
        // float f = 16777216;
        // std::cout << std::fixed << f << std::endl;
        // float f1 = 16777217;
        // std::cout << std::fixed << f1 << std::endl;
        // float f3 = 16777218;
        // std::cout << std::fixed << f3 << std::endl;

        //同じように、INT_MAX(2^31 - 1)をやってみる。指数部は x - 127 = 31よりx = 158
        // 0 10011110 (1).00000000000000000000000(0)(0)(0)(0)(0)(0)(0)(0). 8bit分落ちる。よって2^31 - 1が表現できない
        // 0 10011110 (1).00000000000000000000000(0)(0)(0)(0)(0)(0)(0)(0). よってこのbit列のまま2147483648を出力することになる

        // int i = INT_MAX;
        // std::cout << std::fixed << static_cast<float>(i) << std::endl;
        // double d = INT_MAX;
        // std::cout << std::fixed << static_cast<int>(d) << std::endl;

    }
    if(argc == 2){
        {
            //{
            //    float f;
            //    double d;
            //    f = std::stof(argv[1]);
            //    std::cout << f << std::endl;
            //    d = std::stod(argv[1]);
            //    std::cout << d << std::endl;
            //}
            ScalarConverter::convert(argv[1]);
            
            // ScalarConverter::convert("42");
            // ScalarConverter::convert("*");
            // ScalarConverter::convert("42.0f");
            // ScalarConverter::convert("42.0");
            // ScalarConverter::convert("2147483647");
            // ScalarConverter::convert("-2147483648");
            // ScalarConverter::convert("-2147483649"); 
            // ScalarConverter::convert("2147483648"); 
            // ScalarConverter::convert("+2147483647");
            // ScalarConverter::convert("2147483647.0");
            // ScalarConverter::convert("2147483648."); 
            // ScalarConverter::convert("-2147483649.0"); 
            // ScalarConverter::convert("340282350000000000000000000000000000000.0f");
            // ScalarConverter::convert("340282360000000000000000000000000000000.0f");
            // ScalarConverter::convert("340282350000000000000000000000000000000.0");
            // ScalarConverter::convert("340282360000000000000000000000000000000.0");
            // ScalarConverter::convert
            // ScalarConverter::convert
            // ScalarConverter::convert("832475.234890578942378530275345732748908f");
            // ScalarConverter::convert("2147483648.0f");
            // ScalarConverter::convert("2147483647.");
            // ScalarConverter::convert("2147483648f"); //invalid float literal
            // ScalarConverter::convert("+inf");
            // ScalarConverter::convert("-inf");
            // ScalarConverter::convert("+inff");
            // ScalarConverter::convert("-inff");
            // ScalarConverter::convert("nan");
            // ScalarConverter::convert("nanf");
            // ScalarConverter::convert("a3485.a");
            // ScalarConverter::convert("51189ad123");
            // ScalarConverter::convert("32.3512.13");
            // ScalarConverter::convert("-infffff");
            // ScalarConverter::convert("-infffff");
            // ScalarConverter::convert("nanfnanf");
            // ScalarConverter::convertf");
            // ScalarConverter::convert

        }
        {   //try stof(): float max and overflow
            // std::string str1 = "340282350000000000000000000000000000000";//float max
            // std::string str2 = "340282360000000000000000000000000000000";//float overflow
            // std::cout << std::stof(str1) << std::endl;
            // try{
            //     std::cout << std::stof(str2) << std::endl;
            // }catch(std::out_of_range& e){
            //     std::cout << e.what() << std::endl;
            // }
            // std::cout << std::stod(str1) << std::endl;
            // std::cout << std::stod(str2) << std::endl;

        }
        return 0;
    }
    std::cerr << "Error: invalid arguments" << std::endl;
    return 1;
}
        // 整数部に応じて小数点以下で表現できる桁が変わるやつ
        // float f = atof("832475.234890578942378530275345732748908f");
        // std::cout << f<<std::endl;
        // float f = atof("832.234890578942378530275345732748908f");
        // std::cout << f<<std::endl;
        


        // const std::string str = "11.01139815254";
        // try{
        //     for(size_t i=0;i<8;i++){
        //         ScalarConverter::inputCheck(correctList[i]);
        //         ScalarConverter::convert(correctList[i]);
        //     }
        // }catch(ScalarConverter::InputException& e){
        //     std::cerr << e.exceptionMessage() << std::endl;
        // }

        // ScalarConverter::convert(correctList[i]);
        // f = 1.2f * pow(10.0f, -38);
        // // d = std::stod(str);
        // std::cout << std::setprecision(38) << f << std::endl;
        // ss >> f;
        // std::cout << f << std::endl;
        // ss >> d;
        // std::cout << d << std::endl;

        // std::cout << static_cast<char>(s) << std::endl;
    
    

    // {
    //     ScalarConverter::convert("nanff");
    //     ScalarConverter::convert("");
    //     ScalarConverter::convert("");
    //     ScalarConverter::convert("");
    //     ScalarConverter::convert("");
    //     ScalarConverter::convert("");

    // }

