#include "ScalarConverter.hpp"
#include <iomanip>
int main(int argc, char** argv){
    if(argc == 2){
        ScalarConverter::convert(argv[1]);
        return 0;
    }
    std::cerr << "Error: invalid arguments" << std::endl;
    return 1;
    // {
        // ScalarConverter::convert("42");
        // ScalarConverter::convert("*");
        // ScalarConverter::convert("42.0f");
        // ScalarConverter::convert("42.0");
        // ScalarConverter::convert("2147483647");
        // ScalarConverter::convert("-2147483648");
        // ScalarConverter::convert("-2147483649");
        // ScalarConverter::convert("2147483648");
        // ScalarConverter::convert("+2147483647");
        // ScalarConverter::convert("340282350000000000000000000000000000000.0f");
        // ScalarConverter::convert("340282360000000000000000000000000000000.0f");
        // ScalarConverter::convert("340282360000000000000000000000000000000.0");
        // ScalarConverter::convert
        // ScalarConverter::convert("832475.234890578942378530275345732748908f");
        // ScalarConverter::convert("2147483648.0f");
        // ScalarConverter::convert("+inf");
        // ScalarConverter::convert("-inf");
        // ScalarConverter::convert("+inff");
        // ScalarConverter::convert("-inff");
        // ScalarConverter::convert("nan");
        // ScalarConverter::convert("nanf");
    // }
}
        // 整数部に応じて小数点以下で表現できる桁が変わるやつ
        // float f = atof("832475.234890578942378530275345732748908f");
        // std::cout << f<<std::endl;
        // float f = atof("832.234890578942378530275345732748908f");
        // std::cout << f<<std::endl;
        


        // const std::string str = "11.01139815254";
        // try{
        //     for(size_t i=0;i<8;i++){
        //         ScalarConverter::inputCheck(correctList[i]);
        //         ScalarConverter::convert(correctList[i]);
        //     }
        // }catch(ScalarConverter::InputException& e){
        //     std::cerr << e.exceptionMessage() << std::endl;
        // }

        // ScalarConverter::convert(correctList[i]);
        // f = 1.2f * pow(10.0f, -38);
        // // d = std::stod(str);
        // std::cout << std::setprecision(38) << f << std::endl;
        // ss >> f;
        // std::cout << f << std::endl;
        // ss >> d;
        // std::cout << d << std::endl;

        // std::cout << static_cast<char>(s) << std::endl;
    
    

    // {
    //     ScalarConverter::convert("a3485.a");
    //     ScalarConverter::convert("51189ad123");
    //     ScalarConverter::convert("32.3512.13");
    //     ScalarConverter::convert("");
    //     ScalarConverter::convert("");
    //     ScalarConverter::convert("");
    //     ScalarConverter::convert("");
    //     ScalarConverter::convert("");

    // }

/*  char
argが文字を含む時(末尾のfは許す(.が含まれていることを条件とする)): impossible
stofではddddcccのときはddddだけ取られるので弾けるようにチェックが必要


*/

/*  float

        // std::string str = "340282350000000000000000000000000000000";//float max
        // std::string str = "340282360000000000000000000000000000000";//float overflow
        // std::cout << std::stof(str) << std::endl;
 
*/